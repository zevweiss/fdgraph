#!/usr/bin/python3

import sys
import os
import errno
import glob
from stat import *

fdmap = {}
filemap = {}

processedpids = set()

procnodes = {}
filenodes = {}
fdedges = set()
pcedges = set()
pipeedges = set()

idmap = {}
def getnodeid(s):
	if s in idmap:
		return idmap[s]
	idmap[s] = "node%d" % len(idmap)
	return idmap[s]

def procname(pid):
	tmp = open("/proc/%d/cmdline"%pid).read().split('\x00')[0]
	return tmp.split()[0].split('/')[-1]

def shouldfollow(name):
	if name.startswith("socket:") or name.startswith("pipe:"):
		return True
	try:
		mode = os.stat(name).st_mode
	except OSError as e:
		if e.errno == errno.ENOENT:
			return False
		else:
			raise
	if S_ISFIFO(mode) or S_ISSOCK(mode):
		return True
	return False

def otherusers(name, than):
	pids = [int(fd.split('/')[2]) for fd in filemap[name]]
	return [p for p in pids if p != than]

def getprocnodeid(pid):
	return getnodeid("pid:%s" % pid)

def fdgraph(pid):
	processedpids.add(pid)
	pname = procname(pid)
	procnodeid = getprocnodeid(pid)
	proclabel = "%s\\n%d" % (pname, pid)

	procnodes[procnodeid] = proclabel

	fddir = "/proc/%d/fd/" % pid
	for f in [f for f in fdmap if f.startswith(fddir)]:
		fdnum = int(f.split('/')[-1])
		fname = fdmap[f]
		fni = getnodeid(fname)
		filenodes[fni] = fname

		# could also check O_RDONLY etc. against /proc/pid/fdinfo/*
		try:
			mode = S_IMODE(os.lstat(f).st_mode)
		except OSError as e:
			if e.errno == errno.ENOENT:
				# link no longer exists, pretend it's RW
				mode = S_IRUSR|S_IWUSR
			else:
				raise
		fdedges.add((procnodeid, fni, fdnum, mode))

		if shouldfollow(fname):
			others = otherusers(fname, pid)
			for o in others:
				if o not in processedpids:
					fdgraph(o)

def addpcedges():
	for pid in processedpids:
		ppid = int(open("/proc/%d/stat" % pid).read().split()[3])
		if ppid in processedpids:
			pcedges.add((getprocnodeid(ppid), getprocnodeid(pid)))

def reads(edge, nid):
	return edge[1] == nid and (edge[3] & S_IRUSR and not edge[3] & S_IWUSR)

def writes(edge, nid):
	return edge[1] == nid and (edge[3] & S_IWUSR and not edge[3] & S_IRUSR)

# Replace anonymous pipes with a single reader and single (distinct)
# writer with a direct process-to-process edge.
def filter_pipes():
	for nid, label in list(filenodes.items()):
		if label.startswith("pipe:["):
			readers = [e for e in fdedges if reads(e, nid)]
			writers = [e for e in fdedges if writes(e, nid)]
			if len(readers) == 1 and len(writers) == 1:
				r, w = readers[0], writers[0]
				if r is not w:
					pipeedges.add((w[0], r[0], w[2], r[2]))
					fdedges.remove(r)
					fdedges.remove(w)
					del filenodes[nid]

def dotprocnode(node):
	nid = node[0]
	nlabel = node[1]
	return "%s [label = \"%s\"];" % (nid, nlabel)

ftypeshapes = {
	S_IFDIR: "folder",
	S_IFREG: "note",
	S_IFIFO: "parallelogram",
	S_IFSOCK: "hexagon",
	S_IFBLK: "box3d",
	S_IFCHR: "diamond",
}

def dotfilenode(node):
	nid = node[0]
	nlabel = node[1]
	extra = ''
	if nlabel.startswith("pipe:"):
		m = S_IFIFO
	elif nlabel.startswith("socket:"):
		m = S_IFSOCK
	else:
		try:
			m = S_IFMT(os.stat(nlabel).st_mode)
		except OSError as e:
			if e.errno != errno.ENOENT:
				raise
			if nlabel.startswith("/dev/pts/"):
				m = S_IFCHR
			else:
				m = S_IFREG
	shape = ftypeshapes[m]
	if nlabel.endswith(" (deleted)"):
		    extra += ", style=dashed"
		    nlabel = nlabel.replace(" (deleted)", '')
	return "%s [label = \"%s\", shape=%s%s];" % (nid, nlabel, shape, extra)

def dotedge(edge):
	src = edge[0]
	dst = edge[1]
	label = edge[2]
	mode = edge[3]
	edgedir = "none"
	if mode & S_IRUSR and not mode & S_IWUSR:
		edgedir = "back"
	elif not mode & S_IRUSR and mode & S_IWUSR:
		edgedir = "forward"
	return "%s -> %s [taillabel=\"%d\", dir=%s];" % (src, dst, label, edgedir)

def dotpcedge(edge):
	return "%s -> %s [style=dashed];" % (edge[0], edge[1])

def dotpipeedge(edge):
	return "%s -> %s [taillabel=%d, headlabel=%d, style=bold, dir=forward];" % edge

def dotgraph():
	pdot = "\n\t".join([dotprocnode(n) for n in sorted(procnodes.items())])
	fdot = "\n\t".join([dotfilenode(n) for n in sorted(filenodes.items())])
	edot = "\n\t".join([dotedge(e) for e in sorted(fdedges)])
	pcdot = "\n\t".join([dotpcedge(e) for e in sorted(pcedges)])
	pipedot = "\n\t".join([dotpipeedge(e) for e in sorted(pipeedges)])

	dot = "digraph fds {\n"
	dot += "\t%s\n\n" % pdot
	dot += "\t%s\n\n" % fdot
	dot += "\t%s\n\n" % edot
	dot += "\t%s\n" % pcdot
	dot += "\t%s\n" % pipedot
	dot += "}\n"
	return dot

def usage():
	print("Usage: fdgraph <pid>")
	sys.exit(1)

if __name__ == "__main__":

	try:
		pid = int(sys.argv[1])
	except:
		usage()

	# try to get something approximating an atomic snapshot
	fdlist = glob.glob("/proc/[0-9]*/fd/*")
	fdlist = [f for f in fdlist if os.access(f, os.F_OK)]
	files = [os.readlink(f) for f in fdlist]

	fdmap = dict(zip(fdlist, files))

	for f, fd in zip(files, fdlist):
		if f in filemap:
			filemap[f].append(fd)
		else:
			filemap[f] = [fd]

	fdgraph(pid)
	addpcedges()
	filter_pipes()

	print(dotgraph(), end='')
